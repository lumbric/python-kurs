# Grundschritte:
* excel einlesen
* statistik, mean, etc.
* punktdiagramm (2 variablen)
* r ** 2
* pandas.dataframe.corr: df['a'].corr(df['b']) ** 2

* linopt




# r ** 2
a, b = [1,2,3,4,5,6,], [3,3,3,4,4,4]
np.corrcoef([1,2,3,4,5,6,], [3,3,3,4,4,4])[0][1] ** 2
slope, intercept, rvalue, pvalue, stderr = scipy.stats.linregress(a, b)
pearson_r, pearson_p = scipy.stats.pearsonr(a, b)
plt.scatter()
vllt sowas in die richtung zeigen als vollstäñdiges beispiel: from mlxtend.plotting import plot_linear_regression

# achtung: gibt auch R2, was das ist: sklearn.metrics.r2_score
# r2 https://en.wikipedia.org/wiki/Pearson_correlation_coefficient<Paste>
# R2 https://en.wikipedia.org/wiki/Coefficient_of_determination
# https://stackoverflow.com/questions/36153569/sklearn-r2-score-and-python-stats-lineregress-function-give-very-different-value


# bisschen overkill: https://towardsdatascience.com/linear-regression-using-python-b136c91bf0a2


# Datenaufbereitung
d = pd.read_excel("Produktionsdaten.xlsx", sheet_name="1. Schicht", true_values=["x"])
d.head()
d.index
d.columns
# d.values


sheets = [
    pd.read_excel(
        "Produktionsdaten.xlsx",
        sheet_name=str(sheet_num) + ". Schicht",
        true_values=["x"],
    )
    for sheet_num in range(1, 6)
]


# keep_default_na=False 

sum(1 for i in d['Delaminierung %'] if np.isnan(i))

d['Temperatur [°C]'].min()
d['Temperatur [°C]'].mean()
d['Temperatur [°C]'].max()
(d['Temperatur [°C]'] < 20).sum()
d['Temperatur [°C]'] < 20
list(d['Temperatur [°C]'] < 20)
d[d['Temperatur [°C]'] < 20]  # magic
d.loc[d.index.where(d['Temperatur [°C]'] < 20).dropna()]



d[['Lamellenbreite - Fertigmaß [mm]', 'Temperatur [°C]',]]
d.loc[100]
d.loc[100:105]
d.loc[[100, 102, 107]]
d.loc[[101, 102, 106], ['Lamellenbreite - Fertigmaß [mm]', 'rel. Luftfeuchtigkeit [%]']]
d.loc[:, ['Lamellenbreite - Fertigmaß [mm]', 'rel. Luftfeuchtigkeit [%]']]  # same as above

# iloc: integer locations

d['Ausfalläste außen'].fillna(False, inplace=True)
d['Ausfalläste außen'] = d['Ausfalläste außen'].fillna(False)

# nach nan -> false
sum(d['Ausfalläste außen'])
d['Ausfalläste außen'].count() - sum(d['Ausfalläste außen'])

plt.hist(d['Temperatur [°C]'])
plt.show()
plt.hist(d['Temperatur [°C]'], density=True, cumulative=True)
plt.hist(d['Temperatur [°C]'], cumulative=True)



pd.DataFrame({'A': [2,3, 4, 5], 'B':[4,5,6, 6,]}).corr()
pd.DataFrame({'A': [2,3, 4, 5], 'B':[4,5,6, 1,]}).corr()


d[[d['Temperatur [°C]'], d['Ausbeute nach Fehlerkappung [%]']].corr()
plt.scatter(d['Temperatur [°C]'], d['Ausbeute nach Fehlerkappung [%]'])

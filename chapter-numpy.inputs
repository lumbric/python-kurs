
---

# Mit größeren/externen Daten programmieren

### NumPy
* Grundlage für Scientific Computing / Data Science / Big Data in Python
* Bietet effiziente Datenstrukturen für (groß) numerische Berechnungen  
* Relativ einfache API (Application Programming Interface)
* Wichtige Erweiterungen:
** Pandas: Praktische Datenstrukturen und Operationen auf Basis von NumPy
** Matplotlib: Erzeugt Grafiken
** SciPy: Weitere nützliche Algorithmen


---

NumPy ist nur für numerische Daten gedacht (Vektoren, Matrizen, Koordinaten, ...)

Excel-Dateien können Input und Output sein, aber keine "schönen" Berichte (jedoch schon Grafiken als eigene Bilder).


### openpyxl

* Für menschenlesbare Reports
* Erlaubt auch das Arbeiten mit Excel-Dateien und bleibt dabei in Excel-Welt
* Formeln und Diagramme in Excel
* Formattierungen, Zellen mergen, etc.
* Bietet keine numerischen Berechnungsfunktionen


---

# Matplotlib

* Teil des Scientific Python Universums
* "Matplotlib tries to make easy things easy and hard things possible."
```
import matplotlib.pyplot as plt
plt.plot([2.3, 4.2, 1.2, 5.6])
plt.show()
```

<img alt="pyplot plot" src="img/plot1.png"/>

---

# Python VS NumPy

* NumPy: eigene Datentypen verschiedene Zahlendatentypen (kein `int` oder `float`)  
** Schnellere Berechnungen
** Begrenzte Wertebereiche ([Übersicht](https://numpy.org/devdocs/reference/arrays.scalars.html))
* NumPy: eigener Listentyp `ndarray`  
** Kein Hinzufügen oder Löschen von Elementen
** Dafür effizienteres Speicherlayout, viel schnellere Berechnungen
** Erlaubt mehrere Dimensionen
** Anwenden von Operationen elementenweise
* NumPy: Keine Dictionaries


---

# NumPy array

NumPy Array ~ Python Liste

```
>>> import numpy as np
>>> values = [2.3, 4.2, 1.2, 5.6]
>>> np.array(values)
array([2.3, 4.2, 1.2, 5.6])
>>> np_values = np.array(values)
>>> np_values
array([2.3, 4.2, 1.2, 5.6])
>>> type(np_values)
<class 'numpy.ndarray'>
>>> np_values * 2
array([ 4.6,  8.4,  2.4, 11.2])
>>> np_values ** 2
array([ 5.29, 17.64,  1.44, 31.36])
```
Vgl. in normalem Python:
```
[x ** 2 for x in values]
```
&rArr; Bei numerischen Berechnnungen ist NumPy eleganter, aber auch eingeschränkt.

---

# NumPy array

```
>>> np_values.dtype
dtype('float64')
>>> np_values.shape
(4,)
>>> np_values.ndim
1
```

---

https://numpy.org/devdocs/user/quickstart.html

sehr gute einführung:
https://www.python-kurs.eu/numpy_arrays_erzeugen.php

A as ndarray

A[[1,0]]
A[(1,0)]
A[1,0]
A[1]


A.tolist()

A.sum(axis=0 OR 1)

# axis gibt's öfter bei diesen funktionen:

np.linspace(start=1, stop=5, num=21) < 3

np.percentile(heights, 25))

np.median(heights)

np.var()
np.std()
np.max()

np.append()

https://jakevdp.github.io/PythonDataScienceHandbook/index.html

A.argmax() to mark index in chart

operationen auf ndarray distribuieren, z.b. A < 3

numpy nur eher kurz machen, dann mehr auf pandas
-> numpy als speziell für numerische sachen, eher advanced

np: optimierte "listen" ("ndarrays"), mit fixer länge und fixem datentyp.
-> kein append() für direkte änderungen, np.append gibt neues array zurück


working with arrays:

slicing:
v[0:2, 0:2]
a[0,:]
a[:,0]
https://towardsdatascience.com/hitchhiker-tips-on-effectively-using-python-numpy-arrays-66649b7bd5fb




pandas:

https://ourcodingclub.github.io/2018/04/18/pandas-python-intro.html#datastructures
series als 1-dim
df als 2-dim: tabelle (mehrere series)
-> bsp von schottischen hügeln
df['Height']
df['Height'][3]

dataframe.Height > 1300
dataframe[dataframe.Height > 1300]

df[ [True, True, False, False, False] ]

dataframe['Region'] = ['Grampian', 'Cairngorm', 'Cairngorm', 'Cairngorm', 'Cairngorm']


plt.scatter

pandas plot: https://ourcodingclub.github.io/2018/04/18/pandas-python-intro.html#datastructures
df.plot(x='Tree', y=['Growth', 'Thickness'], kind='bar')
 df.plot(y=['Growth'], x=['Thickness'], kind='scatter')

pandas: corr




plotting basic:


https://www.python-kurs.eu/matplotlib.php

plt.hist([1,3,2,1,2,4,3,2,3,4,5,1,2,3,2, 2], bins=5)
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('My Very Own Histogram')
plt.text(4, 3, r'schöne daten!')
plt.show()


# histogram:
https://realpython.com/python-histograms/


